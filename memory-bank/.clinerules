# Cline Project Rules: Gorlea Tasks

## Project Patterns

### UI/UX Conventions
- Layout should be centered for improved readability
- Clean, minimal UI is preferred over complex or cluttered interfaces
- Dark mode and light mode should be fully supported with consistent styling
- Mobile experience is as important as desktop experience
- All UI changes should be responsive and work across device sizes

### Code Conventions
- Vanilla JavaScript is used throughout (no frameworks)
- ES6+ features are preferred when browser support allows
- CSS uses custom properties (variables) for theming
- Firebase is the primary backend service
- Comments should document functionality and complex logic

### AI Integration Patterns
- Always provide fallback algorithms for core AI features
- Include timeouts for all API calls to prevent UI freezes
- Gracefully degrade AI functionality when offline
- Store API keys securely, with user API keys in localStorage
- Always show clear feedback when AI processing is happening
- Use rich contextual information when communicating with AI services
- Implement multi-layered validation for AI-parsed data

### AI Context Patterns
- Provide comprehensive date/time context to time-sensitive AI operations
- Use "calendar view" approach to communicate temporal information
- Include multiple format representations of the same data (ISO, human-readable)
- Supply both specific dates and relational context (today, tomorrow, next week)
- Always validate AI-returned dates against system time to catch errors
- Log detailed context information for debugging incorrect interpretations

### Date Handling Patterns
- Treat user-selected dates as the single source of truth throughout the application
- Use component-based date comparison (year, month, day) instead of direct Date object comparison
- When parsing dates from strings, extract the components directly to avoid timezone shifts
- Use the enhanced `isSameDay` function that compares date components directly
- Never create new Date objects from date strings for display purposes without handling timezone issues
- When displaying dates, use the updated `formatDate()` function that preserves the original date
- In the `groupTasksByDate()` function, maintain the user-selected date without reinterpretation
- For task due dates with time, ensure consistent formatting in both the UI and the description text
- Include proper ordinal suffixes (1st, 2nd, 3rd, etc.) using the `getDaySuffix` helper function
- Test date handling with edge cases where the date might cross day boundaries in different timezones
- Always use the date/time confirmation modal for reliable date/time selection
- Prefer user-controlled date selection over purely AI-inferred dates
- Maintain hybrid approach: AI for initial parsing, user for final confirmation
- Provide quick-select buttons for common date options (Today, Tomorrow, Next Week)

### Date/Time Modal Patterns
- Always show the date/time confirmation modal before creating tasks with due dates
- Pre-select the date option based on AI parsing when available
- Generate time options in consistent 15-minute increments
- Display times in 12-hour format (with AM/PM) for better readability
- Default time selection to 9:00 AM if no time is specified
- Maintain state variables to track original text and parsed task during confirmation
- Provide clear visual indication for selected date options
- Allow cancellation without losing the original task text
- Update task creation only after explicit user confirmation
- Ensure the modal is responsive and works well on mobile devices

### Task Data Structure
- Tasks must include: id, title, createdAt, completed, priority fields
- Optional task fields: description, dueDate, dueTime, category, notes
- Tasks are stored in Firebase with device ID for reference
- Priority should be one of: "high", "medium", "low"
- Due dates should be in ISO format (YYYY-MM-DD)
- Date handling should always consider current date context

## User Preferences

### Task Management
- Natural language input is strongly preferred over form filling
- Task details should be visible without requiring extra clicks
- Completed tasks should auto-hide by default (implemented via filter dropdown)
- Tasks should be grouped logically (by date/priority)
- Search and filter options should be easily accessible
- Filter dropdown preferred over multiple filter buttons

### Visual Design
- Clean, minimal aesthetic with adequate whitespace
- Centered container layout with max-width (650px)
- Color coding for priorities (red for high, yellow for medium, blue for low)
- Color-coded left borders on task items for visual priority indication
- Dark mode should use true dark backgrounds (#121212) not just gray
- Interactive elements should have clear hover/active states
- Custom scrollbars for scrollable containers
- Card-based components with consistent styling (borders, shadows, padding)
- Consistent spacing with standardized gap measurements

## Implementation Guidelines

### Firebase Integration
- Always check online status before Firebase operations
- Provide clear feedback for synchronization status
- Handle offline scenarios gracefully
- Include retry logic for failed operations
- Use device IDs to help with data management

### AI Features
- Balance between client-side and server-side AI processing
- Local fallback algorithms for core functionality
- Clear feedback during AI processing (spinners, status messages)
- Don't block UI during AI operations
- Throttle expensive AI operations when appropriate
- Modern chat interface with clear visual distinction between user and AI messages

### Code Safety & Backup Procedures
- Create incremental backups at key points during development
- Use the .bak extension for manual backups (app.js.bak)
- When working on large/complex functions, save progress frequently
- For token-limit scenarios, implement a structured approach:
  - Break large changes into smaller, focused modifications
  - Complete one code area before moving to the next
  - Document progress in comments to enable resume if interrupted
- When faced with VS Code conflicts:
  - Always choose "Accept Current Change" to keep the editor's version
  - If options aren't visible, manually select & copy from the right (green) side
  - After resolving, immediately create a proper backup
- Test changes incrementally to avoid large, untested code blocks

## Security Guidelines

### API Key Handling
- OpenAI API keys must be treated as sensitive credentials
  - Store only in localStorage, never in code
  - Only transmit directly to OpenAI API
  - Prompt user to enter their own key
- Firebase API keys can be included in client-side code
  - These are designed for client use with security rules
  - Not considered sensitive like OpenAI keys
  - Firebase security is based on server-side rules, not API key secrecy
- Clear distinction between public API keys (Firebase) and private API keys (OpenAI)

### GitHub Pages Deployment
- No sensitive credentials should be hardcoded for GitHub Pages deployment
- Only prompt for truly sensitive credentials (OpenAI API key)
- Firebase configuration can remain in code for ease of use
- Documentation should clearly explain security approach

### Performance Considerations
- Keep initial load time under 3 seconds
- Optimize rendering for large task lists
- Minimize Firebase read/write operations
- Use service worker caching effectively
- Lazy load non-critical resources

## Testing Checklist

Before deploying changes:
1. Test natural language task parsing with various inputs
2. Verify task synchronization across devices
3. Check offline functionality
4. Test on both mobile and desktop viewports
5. Verify dark/light mode switching
6. Ensure all Firebase operations work correctly
7. Test the behavior of the AI assistant

## Recovery Procedures

### VS Code Conflict Resolution
1. When VS Code shows "(in file) â†’ (in Visual Studio Code)" tabs:
   - This indicates unsaved changes or conflict between disk and memory versions
   - ALWAYS choose "Accept Current Change" to keep the editor's in-memory version
   - Alternatively, copy all content from the right side (new/current version)
   - NEVER close VS Code until conflict is resolved and backed up
   
2. After a token limit interruption:
   - Examine both conflicted versions to understand where code was cut off
   - Save a backup with .bak extension immediately
   - Complete the implementation based on the Memory Bank documentation
   - Test thoroughly before considering the recovery complete

3. Date Handling and Parsing Issues:
   - Date parsing is particularly sensitive to edge cases
   - Test with multiple date formats including the problematic ones
   - Always include fallback date detection for new formats
   - Make sure the date parsing respects regional date formats
   - Provide rich context to AI date parsers (today's date, current week, next week)
   - Implement multi-layered validation for AI-returned dates
   - Check for dates suspiciously in the past or unreasonably in the future
   - Log detected date patterns along with final parsed date for debugging
   - Watch for timezone conversion issues when creating Date objects from ISO strings
   - Use `new Date(originalDate.getTime())` to preserve local date components
   - When formatting dates in descriptions, use proper ordinal suffixes
   - Test date comparisons with dates that cross day boundaries in different timezones
   - Be careful when displaying dates - ensure consistent formatting across all UI elements
   - Always use `isSameDay` for date equality comparisons, not direct comparison
